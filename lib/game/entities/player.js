// Generated by CoffeeScript 1.6.2
ig.module('game.entities.player').requires('impact.entity', 'game.entities.square').defines(function() {
  return window.EntityPlayer = EntitySquare.extend({
    is_player: true,
    sounds: {
      collect: new ig.Sound('media/collect.ogg'),
      hit: new ig.Sound('media/hit.ogg'),
      die: new ig.Sound('media/die2.ogg'),
      "switch": new ig.Sound('media/switch.ogg')
    },
    init: function(x, y, settings) {
      this.parent(x, y, settings);
      this.settings = settings;
      this.game = this.settings.game;
      this.initWidthHeight();
      this.initColor();
      this.initChecks();
      this.speed = 200;
      this.maxVel = {
        x: this.speed,
        y: this.speed
      };
      return this.active = true;
    },
    reset: function() {
      this.score = 0;
      return this.lives = 3;
    },
    update: function() {
      return this.parent();
    },
    initChecks: function() {
      this.type = ig.Entity.TYPE.A;
      return this.checkAgainst = ig.Entity.TYPE.B;
    },
    check: function(other) {
      var friendly_collision;

      if (!other) {
        return;
      }
      if (other.color == null) {
        return;
      }
      friendly_collision = this.color === other.color;
      if (!friendly_collision) {
        if (other.active) {
          other.kill();
          return this.onHit();
        }
      } else {
        other.kill();
        return this.onCollect();
      }
    },
    "switch": function(color) {
      return this.onSwitch(color);
    },
    bounceOffEdge: function() {
      if (this.touchingScreenEdges().length > 0) {
        if (this.isTouching('left') || this.isTouching('right')) {
          this.pos.x = this.last.x;
        }
        if (this.isTouching('top') || this.isTouching('bottom')) {
          return this.pos.y = this.last.y;
        }
      }
    },
    onSwitch: function(color) {
      this.updateColor(color);
      return this.sounds["switch"].play();
    },
    onCollect: function() {
      this.score += 1;
      this.sounds.collect.play();
      if (this.game.noMoreOfColor(this.color)) {
        return this["switch"](this.game.getMostPopularColor());
      }
    },
    onHit: function() {
      if (this.lives > 0) {
        this.lives -= 1;
      }
      this.sounds.hit.play();
      if (this.lives <= 0) {
        return this.onDie({
          score: this.score
        });
      }
    },
    onDie: function(args) {
      this.sounds.die.play();
      return this.settings.dieCallback(args);
    }
  });
});
