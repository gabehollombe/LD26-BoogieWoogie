// Generated by CoffeeScript 1.6.2
ig.module('game.entities.square').requires('impact.entity').defines(function() {
  var COLORS, MAX_VEL, MIN_HEIGHT, MIN_VEL, MIN_WIDTH, PEERS_SPAWNED, SECS_UNTIL_ACTIVE;

  PEERS_SPAWNED = 1;
  MIN_WIDTH = 16;
  MIN_HEIGHT = 16;
  MIN_VEL = 20;
  MAX_VEL = 100;
  COLORS = ['red', 'blue', 'yellow', 'white', 'beige'];
  SECS_UNTIL_ACTIVE = 1;
  return window.EntitySquare = ig.Entity.extend({
    init: function(x, y, settings) {
      this.parent(x, y, settings);
      this.settings = settings;
      this.initWidthHeight();
      this.initColor();
      this.initVels();
      this.type = ig.Entity.TYPE.B;
      this.spawn_timer = new ig.Timer(SECS_UNTIL_ACTIVE);
      this.active = false;
      return this.currentAnim.alpha = 0;
    },
    update: function() {
      if (this.touchingScreenEdges().length > 0) {
        this.bounceOffEdge();
      }
      this.parent();
      if (this.spawn_timer != null) {
        return this.checkSpawnTimer();
      }
    },
    checkSpawnTimer: function() {
      if (this.spawn_timer.delta() > 0) {
        this.spawn_timer = null;
        this.active = true;
        return this.currentAnim.alpha = 0.9;
      } else {
        return this.currentAnim.alpha = 1 + this.spawn_timer.delta();
      }
    },
    spawnPeers: function(player) {
      var i, x, x_offset, y, y_offset, _i, _results;

      _results = [];
      for (i = _i = 0; 0 <= PEERS_SPAWNED ? _i <= PEERS_SPAWNED : _i >= PEERS_SPAWNED; i = 0 <= PEERS_SPAWNED ? ++_i : --_i) {
        x_offset = getRandomInt(this.width, this.width * 2);
        if (Math.random() < 0.5) {
          x_offset *= -1;
        }
        y_offset = getRandomInt(this.height, this.height * 2);
        if (Math.random() < 0.5) {
          y_offset *= -1;
        }
        x = this.pos.x + (this.width / 2) + x_offset;
        y = this.pos.y + (this.height / 2) + y_offset;
        _results.push(this.settings.game.spawnEntity(EntitySquare, x, y, {
          game: this.settings.game,
          color: this.color
        }));
      }
      return _results;
    },
    "switch": function(color) {
      return this.updateColor(color);
    },
    getAnimSheetForColor: function(color) {
      return new ig.AnimationSheet('media/white_320x240.png#' + this.hexForColor(color), this.width, this.height);
    },
    randomColor: function() {
      return COLORS[window.getRandomInt(0, COLORS.length - 1)];
    },
    initWidthHeight: function() {
      this.width = this.settings.width || window.getRandomInt(MIN_WIDTH, ig.system.width / 4);
      this.height = this.settings.height || window.getRandomInt(MIN_HEIGHT, ig.system.height / 4);
      return this.size = {
        x: this.width,
        y: this.height
      };
    },
    initColor: function() {
      this.color = this.settings.color || this.randomColor();
      return this.updateColor();
    },
    updateColor: function(color) {
      if (color) {
        this.color = color;
      }
      this.animSheet = this.getAnimSheetForColor(this.color);
      return this.currentAnim = new ig.Animation(this.animSheet, 0.1, [0], true);
    },
    initVels: function() {
      this.vel = {
        x: this.maybeNegative(window.getRandomInt(MIN_VEL, MAX_VEL)),
        y: this.maybeNegative(window.getRandomInt(MIN_VEL, MAX_VEL))
      };
      return this.maxVel = this.vel;
    },
    maybeNegative: function(val) {
      if (Math.random() < 0.5) {
        return val;
      } else {
        return val * -1;
      }
    },
    bounceOffEdge: function() {
      if (this.isTouching('left') || this.isTouching('right')) {
        this.vel.x *= -1;
      }
      if (this.isTouching('top') || this.isTouching('bottom')) {
        return this.vel.y *= -1;
      }
    },
    touchingScreenEdges: function() {
      var touching;

      touching = [];
      if (this.pos.x <= 0) {
        touching.push('left');
      }
      if (this.pos.y <= this.settings.game.hud.height) {
        touching.push('top');
      }
      if (this.pos.x + this.width >= ig.system.width) {
        touching.push('right');
      }
      if (this.pos.y + this.height >= ig.system.height) {
        touching.push('bottom');
      }
      return touching;
    },
    isTouching: function(dir) {
      return this.touchingScreenEdges().indexOf(dir) >= 0;
    },
    hexForColor: function(color) {
      return {
        'red': 'fd3333',
        'blue': '072f94',
        'yellow': 'ffff3d',
        'white': 'ffffff',
        'black': '0c0a0a',
        'beige': '908f5f'
      }[color];
    }
  });
});
