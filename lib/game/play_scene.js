// Generated by CoffeeScript 1.6.2
window.getRandomInt = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

ig.module("game.play_scene").requires("impact.game", "impact.font", "plugins.scene_manager", "game.imageblender", "game.entities.square", "game.entities.player", "game.entities.hud").defines(function() {
  var ENTITY_SIZE, INITIAL_SPAWN_TIME, MAX_OTHERS;

  ENTITY_SIZE = 8;
  INITIAL_SPAWN_TIME = 2;
  MAX_OTHERS = 12;
  return window.PlayScene = Scene.extend({
    font: new ig.Font("media/04b03.font.png"),
    init: function(manager) {
      this.manager = manager;
      this.bindKeys();
      this.spawn_others_timer = new ig.Timer(INITIAL_SPAWN_TIME);
      return window.Game = this;
    },
    reset: function() {
      var _this = this;

      this.player = this.spawnEntity(EntityPlayer, ig.system.width / 2, ig.system.height / 2, {
        width: 8,
        height: 8,
        color: 'red',
        game: this,
        dieCallback: (function(args) {
          return _this.gameOver(args);
        })
      });
      this.player.reset();
      this.hud = this.spawnEntity(EntityHud, {
        player: this.player
      });
      return this.field = {
        width: ig.system.width,
        height: ig.system.height - this.hud.height - 10
      };
    },
    update: function() {
      this.parent();
      this.updatePlayerXY();
      return this.checkAndSpawnOthers();
    },
    draw: function() {
      return this.parent();
    },
    bindKeys: function() {
      ig.input.bind(ig.KEY.UP_ARROW, 'up');
      ig.input.bind(ig.KEY.DOWN_ARROW, 'down');
      ig.input.bind(ig.KEY.LEFT_ARROW, 'left');
      ig.input.bind(ig.KEY.RIGHT_ARROW, 'right');
      return ig.input.bind(ig.KEY.SPACE, 'switch');
    },
    checkAndSpawnOthers: function() {
      if (!this.isTimeToSpawn()) {
        return;
      }
      this.spawn_others_timer.set(this.getNextSpawnTime());
      if (this.noMoreOfColor(this.player.color)) {
        return this.spawnSquare({
          color: this.player.color
        });
      }
      if (this.isRoomForMore()) {
        return this.spawnSquare();
      }
    },
    isTimeToSpawn: function() {
      return this.spawn_others_timer.delta() > 0;
    },
    isRoomForMore: function() {
      return this.getEntitiesByType(EntitySquare).length - 1 < MAX_OTHERS;
    },
    getNextSpawnTime: function() {
      if (this.player.score <= 0) {
        return INITIAL_SPAWN_TIME;
      } else {
        return INITIAL_SPAWN_TIME / (this.player.score / 3);
      }
    },
    spawnSquare: function(args) {
      var padding, x, y;

      if (args == null) {
        args = {};
      }
      padding = 100;
      x = getRandomInt(padding, ig.system.width - ENTITY_SIZE - padding);
      y = getRandomInt(this.hud.height + padding, ig.system.height - ENTITY_SIZE - padding);
      return this.spawnEntity(EntitySquare, x, y, {
        game: this,
        color: args.color
      });
    },
    gameOver: function(die_callback_args) {
      var ent, _i, _len, _ref;

      _ref = this.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ent = _ref[_i];
        ent.kill();
      }
      return this.manager.endGame({
        score: die_callback_args.score
      });
    },
    updatePlayerXY: function() {
      this.player.vel.x = 0;
      this.player.vel.y = 0;
      if (ig.input.state('left')) {
        this.player.vel.x = -1 * this.player.speed;
      }
      if (ig.input.state('right')) {
        this.player.vel.x = this.player.speed;
      }
      if (ig.input.state('up')) {
        this.player.vel.y = -1 * this.player.speed;
      }
      if (ig.input.state('down')) {
        this.player.vel.y = this.player.speed;
      }
      if (ig.input.pressed('switch')) {
        return this.player["switch"](this.getMostPopularColor());
      }
    },
    getMostPopularColor: function() {
      var color, count, highest_count, most_popular_color, _ref;

      highest_count = 0;
      most_popular_color = null;
      _ref = this.getColorCounts();
      for (color in _ref) {
        count = _ref[color];
        if (count > highest_count) {
          highest_count = count;
          most_popular_color = color;
        }
      }
      return most_popular_color;
    },
    getColorCounts: function() {
      var color_counts, square, squares, _i, _len;

      squares = this.getEntitiesByType(EntitySquare);
      color_counts = {};
      for (_i = 0, _len = squares.length; _i < _len; _i++) {
        square = squares[_i];
        if (color_counts[square.color] != null) {
          color_counts[square.color] += 1;
        } else {
          color_counts[square.color] = 1;
        }
      }
      color_counts[this.player.color] -= 1;
      return color_counts;
    },
    noMoreOfColor: function(color) {
      var counts;

      counts = this.getColorCounts();
      return (counts[color] == null) || counts[color] === 0;
    }
  });
});
